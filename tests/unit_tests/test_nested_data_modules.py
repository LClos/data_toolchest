# type: ignore
"""Tests for address_json.py module."""


from data_toolchest.nested_data.address_nested_data import address_json, AddressedValue, value_drilldown
from data_toolchest.nested_data.compare_nested_data import AddressedValueSet

from pathlib import Path
from pytest import mark, raises

TEST_DATA = Path('tests/data/input')

TEST_EX1 = TEST_DATA / 'example_1.json'
TEST_EX2 = TEST_DATA / 'example_2.json'
TEST_EX3 = TEST_DATA / 'example_3.json'

TEST_AVS = AddressedValueSet({AddressedValue(('test', 'str',), True)})


@mark.parametrize('key_address, value, result',
                  [
                      ('int_eg', 0, [(('int_eg',), 0)]),
                      ('array_eg', [1, '2', True],
                       [(('array_eg', 0), 1),
                        (('array_eg', 1), '2'),
                        (('array_eg', 2), True)]),
                      ('object_eg', {'A': 1, 'B': '2', 'C': True},
                       [(('object_eg', 'A'), 1),
                        (('object_eg', 'B'), '2'),
                        (('object_eg', 'C'), True)]),
                      ('mixed_eg', [{'key_1': 1, 'key_2': '2'}, True, [1, '2', {'key_1': True, 'key_2': False}]],
                       [(('mixed_eg', 0, 'key_1'), 1),
                        (('mixed_eg', 0, 'key_2'), '2'),
                        (('mixed_eg', 1,), True),
                        (('mixed_eg', 2, 0), 1),
                        (('mixed_eg', 2, 1), '2'),
                        (('mixed_eg', 2, 2, 'key_1'), True),
                        (('mixed_eg', 2, 2, 'key_2'), False)]),
                      ('failed_value', (1,), [])
                  ]
                  )
def test_value_drilldown(key_address, value, result):
    """Test value_drilldown function."""
    return_val = list(value_drilldown(key_address, value))
    # return_val = list(return_val for return_val in value_drilldown(key_address, value))
    assert return_val == result


def test_address_json():
    """Test address_json_values function."""
    address_list = {(x, y) for x, y in address_json(TEST_EX3)}
    assert address_list == {(('array_eg', 0), 1),
                            (('array_eg', 1), 2),
                            (('array_eg', 2), 3),
                            (('array_mixed_eg', 0), 1),
                            (('array_mixed_eg', 1), 2.0),
                            (('array_mixed_eg', 2), '3.0'),
                            (('array_mixed_eg', 3), 'string'),
                            (('array_mixed_eg', 4, 0, 0), '[5][0][0]'),
                            (('array_mixed_eg', 4, 0, 1), '[5][0][1]'),
                            (('array_mixed_eg', 4, 1, 0, 0), '[5][1][0][0]'),
                            (('array_mixed_eg', 4, 1, 0, 1), '[5][1][0][1]'),
                            (('array_mixed_eg', 4, 1, 0, 2), '[5][1][0][2]'),
                            (('array_mixed_eg', 4, 1, 1, 0, 0), '[5][1][1][0][0]'),
                            (('array_mixed_eg', 4, 1, 1, 0, 1), '[5][1][1][0][1]'),
                            (('array_mixed_eg', 4, 1, 2, 0), '[5][1][2][0]'),
                            (('array_mixed_eg', 4, 2, 0), '[5][1][0]'),
                            (('array_mixed_eg', 5, 'str_eg'), 'foo'),
                            (('bool_eg',), True),
                            (('int_eg',), 1),
                            (('float_eg',), 3.1415),
                            (('null_eg',), None),
                            (('object_eg', 'array_eg', 0, 'int_eg'), 1),
                            (('object_eg', 'array_eg', 1, 'float_eg'), 0.1),
                            (('object_eg', 'bool_eg'), False),
                            (('object_eg', 'int_eg'), 1),
                            (('object_eg', 'float_eg'), 1.618),
                            (('object_eg', 'object_eg', 'array_eg', 0, 'int_eg'), 1),
                            (('object_eg', 'object_eg', 'array_eg', 1, 'float_eg'), 0.1),
                            (('object_eg', 'object_eg', 'bool_eg'), True),
                            (('object_eg', 'object_eg', 'int_eg'), 2),
                            (('object_eg', 'object_eg', 'float_eg'), 1.618),
                            (('object_eg', 'object_eg', 'object_eg', 'array_eg', 0, 'int_eg'), 1),
                            (('object_eg', 'object_eg', 'object_eg', 'array_eg', 1, 'float_eg'), 0.1),
                            (('object_eg', 'object_eg', 'object_eg', 'bool_eg'), False),
                            (('object_eg', 'object_eg', 'object_eg', 'int_eg'), 3),
                            (('object_eg', 'object_eg', 'object_eg', 'float_eg'), 1.618),
                            (('object_eg', 'object_eg', 'object_eg', 'object_eg', 'str_eg'), 'tier4 object'),
                            (('object_eg', 'object_eg', 'object_eg', 'str_eg'), 'tier3 object'),
                            (('object_eg', 'object_eg', 'str_eg'), 'tier2 object'),
                            (('object_eg', 'str_eg'), 'tier1 object'),
                            (('str_eg',), 'blah'),
                            (('str_int_eg',), '1'),
                            (('str_float_eg',), '1.000000')}


@mark.parametrize('files, addressed_values, addresses',
                  [
                      ((str(TEST_EX1),),
                       {(('array_eg', 0), 1),
                        (('array_eg', 1), 2),
                        (('object_eg', 'bool_eg'), False),
                        (('object_eg', 'float_eg'), 1.618),
                        (('int_eg',), 0),
                        (('str_int_eg',), '1'),
                        (('float_eg',), 3.1415),
                        (('str_float_eg',), '1.000000'),
                        (('null_eg',), None),
                        (('object_eg', 'int_eg'), 1),
                        (('object_eg', 'str_eg'), 'tier1 object'),
                        (('bool_eg',), True),
                        (('array_eg', 2), 3),
                        (('str_eg',), 'blah')},
                       {('array_eg', 0),
                        ('array_eg', 1),
                        ('array_eg', 2),
                        ('bool_eg',),
                        ('float_eg',),
                        ('int_eg',),
                        ('null_eg',),
                        ('object_eg', 'bool_eg'),
                        ('object_eg', 'float_eg'),
                        ('object_eg', 'int_eg'),
                        ('object_eg', 'str_eg'),
                        ('str_eg',),
                        ('str_float_eg',),
                        ('str_int_eg',)}
                       ),
                      ((TEST_EX2,),
                       {(('object_eg', 'bool_eg'), False),
                        (('array_eg', 1), 2),
                        (('object_eg', 'int_eg'), 1),
                        (('float_eg',), 3.1415),
                        (('int_eg',), 1),
                        (('array_eg', 0), 1),
                        (('str_int_eg',), '1'),
                        (('str_float_eg',), '1.000000'),
                        (('null_eg',), None),
                        (('object_eg', 'float_eg'), 1.618),
                        (('array_eg', 2), 3),
                        (('object_eg', 'str_eg'), 'tier1 object-changed value'),
                        (('str_eg',), 'blah'),
                        (('bool_eg',), True)},
                       {('array_eg', 0),
                        ('array_eg', 1),
                        ('array_eg', 2),
                        ('bool_eg',),
                        ('float_eg',),
                        ('int_eg',),
                        ('null_eg',),
                        ('object_eg', 'bool_eg'),
                        ('object_eg', 'float_eg'),
                        ('object_eg', 'int_eg'),
                        ('object_eg', 'str_eg'),
                        ('str_eg',),
                        ('str_float_eg',),
                        ('str_int_eg',)}
                       ),
                      ((TEST_EX3,),
                       {(('array_mixed_eg', 5, 'str_eg'), 'foo'),
                        (('array_eg', 0), 1),
                        (('array_eg', 1), 2),
                        (('object_eg', 'int_eg'), 1),
                        (('float_eg',), 3.1415),
                        (('array_mixed_eg', 2), '3.0'),
                        (('object_eg', 'object_eg', 'array_eg', 1, 'float_eg'), 0.1),
                        (('str_float_eg',), '1.000000'),
                        (('object_eg', 'object_eg', 'object_eg', 'bool_eg'), False),
                        (('str_int_eg',), '1'),
                        (('array_mixed_eg', 4, 0, 0), '[5][0][0]'),
                        (('array_mixed_eg', 3), 'string'),
                        (('array_mixed_eg', 4, 1, 2, 0), '[5][1][2][0]'),
                        (('array_mixed_eg', 4, 1, 0, 2), '[5][1][0][2]'),
                        (('object_eg', 'object_eg', 'object_eg', 'int_eg'), 3),
                        (('array_mixed_eg', 4, 1, 1, 0, 1), '[5][1][1][0][1]'),
                        (('object_eg', 'object_eg', 'float_eg'), 1.618),
                        (('array_mixed_eg', 4, 2, 0), '[5][1][0]'),
                        (('object_eg', 'object_eg', 'object_eg', 'object_eg', 'str_eg'), 'tier4 object'),
                        (('object_eg', 'bool_eg'), False),
                        (('array_mixed_eg', 0), 1),
                        (('object_eg', 'object_eg', 'object_eg', 'str_eg'), 'tier3 object'),
                        (('object_eg', 'array_eg', 1, 'float_eg'), 0.1),
                        (('array_mixed_eg', 4, 1, 1, 0, 0), '[5][1][1][0][0]'),
                        (('object_eg', 'object_eg', 'object_eg', 'float_eg'), 1.618),
                        (('array_mixed_eg', 1), 2.0),
                        (('array_mixed_eg', 4, 1, 0, 0), '[5][1][0][0]'),
                        (('int_eg',), 1),
                        (('str_eg',), 'blah'),
                        (('object_eg', 'object_eg', 'object_eg', 'array_eg', 0, 'int_eg'), 1),
                        (('bool_eg',), True),
                        (('object_eg', 'float_eg'), 1.618),
                        (('object_eg', 'array_eg', 0, 'int_eg'), 1),
                        (('object_eg', 'object_eg', 'str_eg'), 'tier2 object'),
                        (('null_eg',), None),
                        (('object_eg', 'object_eg', 'bool_eg'), True),
                        (('object_eg', 'object_eg', 'object_eg', 'array_eg', 1, 'float_eg'), 0.1),
                        (('array_eg', 2), 3),
                        (('object_eg', 'object_eg', 'array_eg', 0, 'int_eg'), 1),
                        (('object_eg', 'object_eg', 'int_eg'), 2),
                        (('object_eg', 'str_eg'), 'tier1 object'),
                        (('array_mixed_eg', 4, 0, 1), '[5][0][1]'),
                        (('array_mixed_eg', 4, 1, 0, 1), '[5][1][0][1]')},
                       {('array_eg', 0),
                        ('array_eg', 1),
                        ('array_eg', 2),
                        ('array_mixed_eg', 0),
                        ('array_mixed_eg', 1),
                        ('array_mixed_eg', 2),
                        ('array_mixed_eg', 3),
                        ('array_mixed_eg', 4, 0, 0),
                        ('array_mixed_eg', 4, 0, 1),
                        ('array_mixed_eg', 4, 1, 0, 0),
                        ('array_mixed_eg', 4, 1, 0, 1),
                        ('array_mixed_eg', 4, 1, 0, 2),
                        ('array_mixed_eg', 4, 1, 1, 0, 0),
                        ('array_mixed_eg', 4, 1, 1, 0, 1),
                        ('array_mixed_eg', 4, 1, 2, 0),
                        ('array_mixed_eg', 4, 2, 0),
                        ('array_mixed_eg', 5, 'str_eg'),
                        ('bool_eg',),
                        ('float_eg',),
                        ('int_eg',),
                        ('null_eg',),
                        ('object_eg', 'array_eg', 0, 'int_eg'),
                        ('object_eg', 'array_eg', 1, 'float_eg'),
                        ('object_eg', 'bool_eg'),
                        ('object_eg', 'float_eg'),
                        ('object_eg', 'int_eg'),
                        ('object_eg', 'object_eg', 'array_eg', 0, 'int_eg'),
                        ('object_eg', 'object_eg', 'array_eg', 1, 'float_eg'),
                        ('object_eg', 'object_eg', 'bool_eg'),
                        ('object_eg', 'object_eg', 'float_eg'),
                        ('object_eg', 'object_eg', 'int_eg'),
                        ('object_eg', 'object_eg', 'object_eg', 'array_eg', 0, 'int_eg'),
                        ('object_eg', 'object_eg', 'object_eg', 'array_eg', 1, 'float_eg'),
                        ('object_eg', 'object_eg', 'object_eg', 'bool_eg'),
                        ('object_eg', 'object_eg', 'object_eg', 'float_eg'),
                        ('object_eg', 'object_eg', 'object_eg', 'int_eg'),
                        ('object_eg', 'object_eg', 'object_eg', 'object_eg', 'str_eg'),
                        ('object_eg', 'object_eg', 'object_eg', 'str_eg'),
                        ('object_eg', 'object_eg', 'str_eg'),
                        ('object_eg', 'str_eg'),
                        ('str_eg',),
                        ('str_float_eg',),
                        ('str_int_eg',)}
                       ),
                      ((str(TEST_EX1), TEST_EX2, AddressedValueSet(TEST_EX3), {AddressedValue(('test', 'str',), True)},),
                       {(('test', 'str',), True),
                        (('object_eg', 'array_eg', 1, 'float_eg'), 0.1),
                        (('array_mixed_eg', 4, 1, 2, 0), '[5][1][2][0]'),
                        (('array_mixed_eg', 4, 1, 0, 2), '[5][1][0][2]'),
                        (('null_eg',), None),
                        (('int_eg',), 1),
                        (('array_mixed_eg', 5, 'str_eg'), 'foo'),
                        (('object_eg', 'str_eg'), 'tier1 object'),
                        (('str_float_eg',), '1.000000'),
                        (('object_eg', 'object_eg', 'object_eg', 'object_eg', 'str_eg'), 'tier4 object'),
                        (('object_eg', 'object_eg', 'str_eg'), 'tier2 object'),
                        (('array_eg', 2), 3),
                        (('array_mixed_eg', 4, 1, 0, 0), '[5][1][0][0]'),
                        (('object_eg', 'int_eg'), 1),
                        (('array_mixed_eg', 4, 1, 1, 0, 1), '[5][1][1][0][1]'),
                        (('object_eg', 'object_eg', 'array_eg', 0, 'int_eg'), 1),
                        (('array_mixed_eg', 1), 2.0),
                        (('object_eg', 'float_eg'), 1.618),
                        (('str_eg',), 'blah'),
                        (('array_mixed_eg', 2), '3.0'),
                        (('int_eg',), 0),
                        (('object_eg', 'str_eg'), 'tier1 object-changed value'),
                        (('array_mixed_eg', 4, 1, 0, 1), '[5][1][0][1]'),
                        (('object_eg', 'object_eg', 'object_eg', 'float_eg'), 1.618),
                        (('float_eg',), 3.1415),
                        (('array_mixed_eg', 0), 1),
                        (('array_eg', 1), 2),
                        (('object_eg', 'bool_eg'), False),
                        (('bool_eg',), True),
                        (('str_int_eg',), '1'),
                        (('object_eg', 'object_eg', 'array_eg', 1, 'float_eg'), 0.1),
                        (('array_mixed_eg', 4, 0, 1), '[5][0][1]'),
                        (('object_eg', 'object_eg', 'int_eg'), 2),
                        (('object_eg', 'object_eg', 'float_eg'), 1.618),
                        (('object_eg', 'object_eg', 'object_eg', 'str_eg'), 'tier3 object'),
                        (('array_mixed_eg', 4, 2, 0), '[5][1][0]'),
                        (('array_mixed_eg', 4, 1, 1, 0, 0), '[5][1][1][0][0]'),
                        (('array_mixed_eg', 3), 'string'),
                        (('object_eg', 'object_eg', 'object_eg', 'array_eg', 0, 'int_eg'), 1),
                        (('object_eg', 'object_eg', 'object_eg', 'int_eg'), 3),
                        (('object_eg', 'object_eg', 'object_eg', 'bool_eg'), False),
                        (('array_eg', 0), 1),
                        (('array_mixed_eg', 4, 0, 0), '[5][0][0]'),
                        (('object_eg', 'object_eg', 'bool_eg'), True),
                        (('object_eg', 'object_eg', 'object_eg', 'array_eg', 1, 'float_eg'), 0.1),
                        (('object_eg', 'array_eg', 0, 'int_eg'), 1)},
                       {('array_eg', 0),
                        ('array_eg', 1),
                        ('array_eg', 2),
                        ('array_mixed_eg', 0),
                        ('array_mixed_eg', 1),
                        ('array_mixed_eg', 2),
                        ('array_mixed_eg', 3),
                        ('array_mixed_eg', 4, 0, 0),
                        ('array_mixed_eg', 4, 0, 1),
                        ('array_mixed_eg', 4, 1, 0, 0),
                        ('array_mixed_eg', 4, 1, 0, 1),
                        ('array_mixed_eg', 4, 1, 0, 2),
                        ('array_mixed_eg', 4, 1, 1, 0, 0),
                        ('array_mixed_eg', 4, 1, 1, 0, 1),
                        ('array_mixed_eg', 4, 1, 2, 0),
                        ('array_mixed_eg', 4, 2, 0),
                        ('array_mixed_eg', 5, 'str_eg'),
                        ('bool_eg',),
                        ('float_eg',),
                        ('int_eg',),
                        ('null_eg',),
                        ('object_eg', 'array_eg', 0, 'int_eg'),
                        ('object_eg', 'array_eg', 1, 'float_eg'),
                        ('object_eg', 'bool_eg'),
                        ('object_eg', 'float_eg'),
                        ('object_eg', 'int_eg'),
                        ('object_eg', 'object_eg', 'array_eg', 0, 'int_eg'),
                        ('object_eg', 'object_eg', 'array_eg', 1, 'float_eg'),
                        ('object_eg', 'object_eg', 'bool_eg'),
                        ('object_eg', 'object_eg', 'float_eg'),
                        ('object_eg', 'object_eg', 'int_eg'),
                        ('object_eg', 'object_eg', 'object_eg', 'array_eg', 0, 'int_eg'),
                        ('object_eg', 'object_eg', 'object_eg', 'array_eg', 1, 'float_eg'),
                        ('object_eg', 'object_eg', 'object_eg', 'bool_eg'),
                        ('object_eg', 'object_eg', 'object_eg', 'float_eg'),
                        ('object_eg', 'object_eg', 'object_eg', 'int_eg'),
                        ('object_eg', 'object_eg', 'object_eg', 'object_eg', 'str_eg'),
                        ('object_eg', 'object_eg', 'object_eg', 'str_eg'),
                        ('object_eg', 'object_eg', 'str_eg'),
                        ('object_eg', 'str_eg'),
                        ('str_eg',),
                        ('str_float_eg',),
                        ('str_int_eg',),
                        ('test', 'str',)}
                       )
                  ]
                  )
def test_AddressedValueSet_init(files, addressed_values, addresses):
    """Test the dataclass object."""
    new_AVS = AddressedValueSet(*files)
    AVS_set = {x[:] for x in new_AVS.addressed_values}
    assert addressed_values == AVS_set
    AVS_set_addresses = {x[:] for x in new_AVS.addresses()}
    assert addresses == AVS_set_addresses


def test_AddressedValueSet_str():
    """Test the dataclass object __str__ function."""
    assert "{(('test', 'str'), True)}" == str(TEST_AVS)


def test_AddressedValueSet_get_addressedvalue_sets():
    """Test the dataclass object __str__ function."""
    assert [TEST_AVS.addressed_values] == list(AddressedValueSet.get_addressedvalue_sets((TEST_AVS,)))
    with raises(TypeError):
        list(AddressedValueSet.get_addressedvalue_sets(3.14))


@mark.parametrize('files, union_with, union_results',
                  [
                      (TEST_EX1, {TEST_EX2, TEST_EX3},
                       {(('object_eg', 'array_eg', 1, 'float_eg'), 0.1),
                        (('array_mixed_eg', 4, 1, 2, 0), '[5][1][2][0]'),
                        (('array_mixed_eg', 4, 1, 0, 2), '[5][1][0][2]'),
                        (('null_eg',), None),
                        (('int_eg',), 1),
                        (('array_mixed_eg', 5, 'str_eg'), 'foo'),
                        (('object_eg', 'str_eg'), 'tier1 object'),
                        (('str_float_eg',), '1.000000'),
                        (('object_eg', 'object_eg', 'object_eg', 'object_eg', 'str_eg'), 'tier4 object'),
                        (('object_eg', 'object_eg', 'str_eg'), 'tier2 object'),
                        (('array_eg', 2), 3),
                        (('array_mixed_eg', 4, 1, 0, 0), '[5][1][0][0]'),
                        (('object_eg', 'int_eg'), 1),
                        (('array_mixed_eg', 4, 1, 1, 0, 1), '[5][1][1][0][1]'),
                        (('object_eg', 'object_eg', 'array_eg', 0, 'int_eg'), 1),
                        (('array_mixed_eg', 1), 2.0),
                        (('object_eg', 'float_eg'), 1.618),
                        (('str_eg',), 'blah'),
                        (('array_mixed_eg', 2), '3.0'),
                        (('int_eg',), 0),
                        (('object_eg', 'str_eg'), 'tier1 object-changed value'),
                        (('array_mixed_eg', 4, 1, 0, 1), '[5][1][0][1]'),
                        (('object_eg', 'object_eg', 'object_eg', 'float_eg'), 1.618),
                        (('float_eg',), 3.1415),
                        (('array_mixed_eg', 0), 1),
                        (('array_eg', 1), 2),
                        (('object_eg', 'bool_eg'), False),
                        (('bool_eg',), True),
                        (('str_int_eg',), '1'),
                        (('object_eg', 'object_eg', 'array_eg', 1, 'float_eg'), 0.1),
                        (('array_mixed_eg', 4, 0, 1), '[5][0][1]'),
                        (('object_eg', 'object_eg', 'int_eg'), 2),
                        (('object_eg', 'object_eg', 'float_eg'), 1.618),
                        (('object_eg', 'object_eg', 'object_eg', 'str_eg'), 'tier3 object'),
                        (('array_mixed_eg', 4, 2, 0), '[5][1][0]'),
                        (('array_mixed_eg', 4, 1, 1, 0, 0), '[5][1][1][0][0]'),
                        (('array_mixed_eg', 3), 'string'),
                        (('object_eg', 'object_eg', 'object_eg', 'array_eg', 0, 'int_eg'), 1),
                        (('object_eg', 'object_eg', 'object_eg', 'int_eg'), 3),
                        (('object_eg', 'object_eg', 'object_eg', 'bool_eg'), False),
                        (('array_eg', 0), 1),
                        (('array_mixed_eg', 4, 0, 0), '[5][0][0]'),
                        (('object_eg', 'object_eg', 'bool_eg'), True),
                        (('object_eg', 'object_eg', 'object_eg', 'array_eg', 1, 'float_eg'), 0.1),
                        (('object_eg', 'array_eg', 0, 'int_eg'), 1)},
                       )
                  ]
                  )
def test_AddressedValueSet_union(files, union_with, union_results):
    """Test the dataclass object union function."""
    new_AVS = AddressedValueSet(files)
    assert union_results == set(new_AVS.union(*union_with))


@mark.parametrize('files, intersection_with, intersection_results',
                  [
                      (TEST_EX1, TEST_EX2,
                       {(('array_eg', 0), 1),
                        (('array_eg', 1), 2),
                        (('array_eg', 2), 3),
                        (('bool_eg',), True),
                        (('float_eg',), 3.1415),
                        (('null_eg',), None),
                        (('object_eg', 'bool_eg'), False),
                        (('object_eg', 'float_eg'), 1.618),
                        (('object_eg', 'int_eg'), 1),
                        (('str_eg',), 'blah'),
                        (('str_float_eg',), '1.000000'),
                        (('str_int_eg',), '1')}
                       ),
                      (TEST_EX1, TEST_EX3,
                       {(('array_eg', 0), 1),
                        (('array_eg', 1), 2),
                        (('array_eg', 2), 3),
                        (('bool_eg',), True),
                        (('float_eg',), 3.1415),
                        (('null_eg',), None),
                        (('object_eg', 'bool_eg'), False),
                        (('object_eg', 'float_eg'), 1.618),
                        (('object_eg', 'int_eg'), 1),
                        (('object_eg', 'str_eg'), 'tier1 object'),
                        (('str_eg',), 'blah'),
                        (('str_float_eg',), '1.000000'),
                        (('str_int_eg',), '1')}
                       ),
                      (TEST_EX2, TEST_EX3,
                       {(('array_eg', 0), 1),
                        (('array_eg', 1), 2),
                        (('array_eg', 2), 3),
                        (('bool_eg',), True),
                        (('float_eg',), 3.1415),
                        (('int_eg',), 1),
                        (('null_eg',), None),
                        (('object_eg', 'bool_eg'), False),
                        (('object_eg', 'float_eg'), 1.618),
                        (('object_eg', 'int_eg'), 1),
                        (('str_eg',), 'blah'),
                        (('str_float_eg',), '1.000000'),
                        (('str_int_eg',), '1')}
                       )
                  ]
                  )
def test_AddressedValueSet_intersection(files, intersection_with, intersection_results):
    """Test the dataclass object intersection function."""
    new_AVS = AddressedValueSet(files)
    intersection_set = {x[:] for x in new_AVS.intersection(intersection_with)}
    assert intersection_results == intersection_set


@mark.parametrize('files, difference_with, difference_results',
                  [
                      (TEST_EX1, TEST_EX2,
                       {(('int_eg',), 0),
                        (('object_eg', 'str_eg'), 'tier1 object')}
                       ),
                      (TEST_EX1, TEST_EX3,
                       {(('int_eg',), 0)}
                       ),
                      (TEST_EX2, TEST_EX3,
                       {(('object_eg', 'str_eg'), 'tier1 object-changed value')}
                       ),
                      (TEST_EX3, TEST_EX2,
                       {(('array_mixed_eg', 0), 1),
                        (('array_mixed_eg', 1), 2.0),
                        (('array_mixed_eg', 2), '3.0'),
                        (('array_mixed_eg', 3), 'string'),
                        (('array_mixed_eg', 4, 0, 0), '[5][0][0]'),
                        (('array_mixed_eg', 4, 0, 1), '[5][0][1]'),
                        (('array_mixed_eg', 4, 1, 0, 0), '[5][1][0][0]'),
                        (('array_mixed_eg', 4, 1, 0, 1), '[5][1][0][1]'),
                        (('array_mixed_eg', 4, 1, 0, 2), '[5][1][0][2]'),
                        (('array_mixed_eg', 4, 1, 1, 0, 0), '[5][1][1][0][0]'),
                        (('array_mixed_eg', 4, 1, 1, 0, 1), '[5][1][1][0][1]'),
                        (('array_mixed_eg', 4, 1, 2, 0), '[5][1][2][0]'),
                        (('array_mixed_eg', 4, 2, 0), '[5][1][0]'),
                        (('array_mixed_eg', 5, 'str_eg'), 'foo'),
                        (('object_eg', 'array_eg', 0, 'int_eg'), 1),
                        (('object_eg', 'array_eg', 1, 'float_eg'), 0.1),
                        (('object_eg', 'object_eg', 'array_eg', 0, 'int_eg'), 1),
                        (('object_eg', 'object_eg', 'array_eg', 1, 'float_eg'), 0.1),
                        (('object_eg', 'object_eg', 'bool_eg'), True),
                        (('object_eg', 'object_eg', 'float_eg'), 1.618),
                        (('object_eg', 'object_eg', 'int_eg'), 2),
                        (('object_eg', 'object_eg', 'object_eg', 'array_eg', 0, 'int_eg'), 1),
                        (('object_eg', 'object_eg', 'object_eg', 'array_eg', 1, 'float_eg'), 0.1),
                        (('object_eg', 'object_eg', 'object_eg', 'bool_eg'), False),
                        (('object_eg', 'object_eg', 'object_eg', 'float_eg'), 1.618),
                        (('object_eg', 'object_eg', 'object_eg', 'int_eg'), 3),
                        (('object_eg', 'object_eg', 'object_eg', 'object_eg', 'str_eg'), 'tier4 object'),
                        (('object_eg', 'object_eg', 'object_eg', 'str_eg'), 'tier3 object'),
                        (('object_eg', 'object_eg', 'str_eg'), 'tier2 object'),
                        (('object_eg', 'str_eg'), 'tier1 object')}
                       )
                  ]
                  )
def test_AddressedValueSet_difference(files, difference_with, difference_results):
    """Test the dataclass object intersection function."""
    new_AVS = AddressedValueSet(files)
    difference_set = {x[:] for x in new_AVS.difference(difference_with)}
    assert difference_results == difference_set


@mark.parametrize('files, symmetric_difference_with, symmetric_difference_results',
                  [
                      (TEST_EX1, {TEST_EX2},
                       {(('int_eg',), 0),
                        (('int_eg',), 1),
                        (('object_eg', 'str_eg'), 'tier1 object'),
                        (('object_eg', 'str_eg'), 'tier1 object-changed value')}
                       ),
                      (TEST_EX1, {TEST_EX3},
                       {(('array_mixed_eg', 0), 1),
                        (('array_mixed_eg', 1), 2.0),
                        (('array_mixed_eg', 2), '3.0'),
                        (('array_mixed_eg', 3), 'string'),
                        (('array_mixed_eg', 4, 0, 0), '[5][0][0]'),
                        (('array_mixed_eg', 4, 0, 1), '[5][0][1]'),
                        (('array_mixed_eg', 4, 1, 0, 0), '[5][1][0][0]'),
                        (('array_mixed_eg', 4, 1, 0, 1), '[5][1][0][1]'),
                        (('array_mixed_eg', 4, 1, 0, 2), '[5][1][0][2]'),
                        (('array_mixed_eg', 4, 1, 1, 0, 0), '[5][1][1][0][0]'),
                        (('array_mixed_eg', 4, 1, 1, 0, 1), '[5][1][1][0][1]'),
                        (('array_mixed_eg', 4, 1, 2, 0), '[5][1][2][0]'),
                        (('array_mixed_eg', 4, 2, 0), '[5][1][0]'),
                        (('array_mixed_eg', 5, 'str_eg'), 'foo'),
                        (('int_eg',), 0),
                        (('int_eg',), 1),
                        (('object_eg', 'array_eg', 0, 'int_eg'), 1),
                        (('object_eg', 'array_eg', 1, 'float_eg'), 0.1),
                        (('object_eg', 'object_eg', 'array_eg', 0, 'int_eg'), 1),
                        (('object_eg', 'object_eg', 'array_eg', 1, 'float_eg'), 0.1),
                        (('object_eg', 'object_eg', 'bool_eg'), True),
                        (('object_eg', 'object_eg', 'float_eg'), 1.618),
                        (('object_eg', 'object_eg', 'int_eg'), 2),
                        (('object_eg', 'object_eg', 'object_eg', 'array_eg', 0, 'int_eg'), 1),
                        (('object_eg', 'object_eg', 'object_eg', 'array_eg', 1, 'float_eg'), 0.1),
                        (('object_eg', 'object_eg', 'object_eg', 'bool_eg'), False),
                        (('object_eg', 'object_eg', 'object_eg', 'float_eg'), 1.618),
                        (('object_eg', 'object_eg', 'object_eg', 'int_eg'), 3),
                        (('object_eg', 'object_eg', 'object_eg', 'object_eg', 'str_eg'), 'tier4 object'),
                        (('object_eg', 'object_eg', 'object_eg', 'str_eg'), 'tier3 object'),
                        (('object_eg', 'object_eg', 'str_eg'), 'tier2 object')}
                       ),
                      (TEST_EX2, {TEST_EX3},
                       {(('array_mixed_eg', 0), 1),
                        (('array_mixed_eg', 1), 2.0),
                        (('array_mixed_eg', 2), '3.0'),
                        (('array_mixed_eg', 3), 'string'),
                        (('array_mixed_eg', 4, 0, 0), '[5][0][0]'),
                        (('array_mixed_eg', 4, 0, 1), '[5][0][1]'),
                        (('array_mixed_eg', 4, 1, 0, 0), '[5][1][0][0]'),
                        (('array_mixed_eg', 4, 1, 0, 1), '[5][1][0][1]'),
                        (('array_mixed_eg', 4, 1, 0, 2), '[5][1][0][2]'),
                        (('array_mixed_eg', 4, 1, 1, 0, 0), '[5][1][1][0][0]'),
                        (('array_mixed_eg', 4, 1, 1, 0, 1), '[5][1][1][0][1]'),
                        (('array_mixed_eg', 4, 1, 2, 0), '[5][1][2][0]'),
                        (('array_mixed_eg', 4, 2, 0), '[5][1][0]'),
                        (('array_mixed_eg', 5, 'str_eg'), 'foo'),
                        (('object_eg', 'array_eg', 0, 'int_eg'), 1),
                        (('object_eg', 'array_eg', 1, 'float_eg'), 0.1),
                        (('object_eg', 'object_eg', 'array_eg', 0, 'int_eg'), 1),
                        (('object_eg', 'object_eg', 'array_eg', 1, 'float_eg'), 0.1),
                        (('object_eg', 'object_eg', 'bool_eg'), True),
                        (('object_eg', 'object_eg', 'float_eg'), 1.618),
                        (('object_eg', 'object_eg', 'int_eg'), 2),
                        (('object_eg', 'object_eg', 'object_eg', 'array_eg', 0, 'int_eg'), 1),
                        (('object_eg', 'object_eg', 'object_eg', 'array_eg', 1, 'float_eg'), 0.1),
                        (('object_eg', 'object_eg', 'object_eg', 'bool_eg'), False),
                        (('object_eg', 'object_eg', 'object_eg', 'float_eg'), 1.618),
                        (('object_eg', 'object_eg', 'object_eg', 'int_eg'), 3),
                        (('object_eg', 'object_eg', 'object_eg', 'object_eg', 'str_eg'), 'tier4 object'),
                        (('object_eg', 'object_eg', 'object_eg', 'str_eg'), 'tier3 object'),
                        (('object_eg', 'object_eg', 'str_eg'), 'tier2 object'),
                        (('object_eg', 'str_eg'), 'tier1 object'),
                        (('object_eg', 'str_eg'), 'tier1 object-changed value')}
                       ),
                      (TEST_EX1, {TEST_EX2, TEST_EX3},
                       {(('array_mixed_eg', 0), 1),
                        (('array_mixed_eg', 1), 2.0),
                        (('array_mixed_eg', 2), '3.0'),
                        (('array_mixed_eg', 3), 'string'),
                        (('array_mixed_eg', 4, 0, 0), '[5][0][0]'),
                        (('array_mixed_eg', 4, 0, 1), '[5][0][1]'),
                        (('array_mixed_eg', 4, 1, 0, 0), '[5][1][0][0]'),
                        (('array_mixed_eg', 4, 1, 0, 1), '[5][1][0][1]'),
                        (('array_mixed_eg', 4, 1, 0, 2), '[5][1][0][2]'),
                        (('array_mixed_eg', 4, 1, 1, 0, 0), '[5][1][1][0][0]'),
                        (('array_mixed_eg', 4, 1, 1, 0, 1), '[5][1][1][0][1]'),
                        (('array_mixed_eg', 4, 1, 2, 0), '[5][1][2][0]'),
                        (('array_mixed_eg', 4, 2, 0), '[5][1][0]'),
                        (('array_mixed_eg', 5, 'str_eg'), 'foo'),
                        (('int_eg',), 0),
                        (('int_eg',), 1),
                        (('object_eg', 'array_eg', 0, 'int_eg'), 1),
                        (('object_eg', 'array_eg', 1, 'float_eg'), 0.1),
                        (('object_eg', 'object_eg', 'array_eg', 0, 'int_eg'), 1),
                        (('object_eg', 'object_eg', 'array_eg', 1, 'float_eg'), 0.1),
                        (('object_eg', 'object_eg', 'bool_eg'), True),
                        (('object_eg', 'object_eg', 'float_eg'), 1.618),
                        (('object_eg', 'object_eg', 'int_eg'), 2),
                        (('object_eg', 'object_eg', 'object_eg', 'array_eg', 0, 'int_eg'), 1),
                        (('object_eg', 'object_eg', 'object_eg', 'array_eg', 1, 'float_eg'), 0.1),
                        (('object_eg', 'object_eg', 'object_eg', 'bool_eg'), False),
                        (('object_eg', 'object_eg', 'object_eg', 'float_eg'), 1.618),
                        (('object_eg', 'object_eg', 'object_eg', 'int_eg'), 3),
                        (('object_eg', 'object_eg', 'object_eg', 'object_eg', 'str_eg'), 'tier4 object'),
                        (('object_eg', 'object_eg', 'object_eg', 'str_eg'), 'tier3 object'),
                        (('object_eg', 'object_eg', 'str_eg'), 'tier2 object'),
                        (('object_eg', 'str_eg'), 'tier1 object'),
                        (('object_eg', 'str_eg'), 'tier1 object-changed value')}
                       )
                  ]
                  )
def test_AddressedValueSet_symmetric_difference(files, symmetric_difference_with, symmetric_difference_results):
    """Test the dataclass object intersection function."""
    new_AVS = AddressedValueSet(files)
    symmetric_difference_set = {x[:] for x in new_AVS.symmetric_difference(*symmetric_difference_with)}
    assert symmetric_difference_results == symmetric_difference_set


def test_AddressedValueSet_finds():
    """Test the dataclass object find functions."""
    assert [AddressedValue(('test', 'str'), True)] == list(TEST_AVS.find_address_with_key('test'))
    assert [] == list(TEST_AVS.find_address_with_key('not_there'))
    assert [AddressedValue(('test', 'str'), True)] == list(TEST_AVS.find_value(True))
    assert [] == list(TEST_AVS.find_value(1))
